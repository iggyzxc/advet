package com.macadev.advet.exception;

import com.macadev.advet.util.FeedbackMessage;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.context.request.WebRequest;

import java.time.LocalDateTime;

@ControllerAdvice
public class GlobalExceptionHandler {

    // Handles specific user not found exceptions
    @ExceptionHandler(ResourceNotFoundException.class)
    public ResponseEntity<ErrorMessage> handleResourceNotFoundException(
            ResourceNotFoundException exception,
            WebRequest webRequest) {
        ErrorMessage errorMessage = new ErrorMessage(
                LocalDateTime.now(),
                exception.getMessage(), // Use the message generated by the exception
                webRequest.getDescription(false),
                exception.getResourceType().toUpperCase() + "_NOT_FOUND" // Dynamic Error code
        );
        return new ResponseEntity<>(errorMessage, HttpStatus.NOT_FOUND);
    }

    // Handles specific user already exists exceptions
    @ExceptionHandler(ResourceAlreadyExistsException.class)
    public ResponseEntity<ErrorMessage> handleResourceAlreadyExistsException(
            ResourceAlreadyExistsException exception,
            WebRequest webRequest) {
        ErrorMessage errorMessage = new ErrorMessage(
                LocalDateTime.now(),
                exception.getMessage(), // Use the message generated by the exception
                webRequest.getDescription(false),
                exception.getResourceType().toUpperCase() + "_ALREADY_EXISTS"
        );
        return new ResponseEntity<>(errorMessage, HttpStatus.CONFLICT);
    }

    public ResponseEntity<ErrorMessage> handleInvalidInputException(
            InvalidInputException exception,
            WebRequest webRequest) {
        ErrorMessage errorMessage = new ErrorMessage(
                LocalDateTime.now(),
                exception.getMessage(), // Use the message generated by the exception
                webRequest.getDescription(false),
                "INVALID_INPUT"
        );
        return new ResponseEntity<>(errorMessage, HttpStatus.BAD_REQUEST);
    }

    // Generic fallback handler for unexpected errors
    // Handles all other exceptions
    @ExceptionHandler(Exception.class)
    public ResponseEntity<ErrorMessage> handleException(Exception exception, WebRequest webRequest) {
        ErrorMessage errorMessage = new ErrorMessage(
                LocalDateTime.now(),
                FeedbackMessage.INTERNAL_SERVER_ERROR,
                webRequest.getDescription(false),
                "INTERNAL_SERVER_ERROR"
        );
        return new ResponseEntity<>(errorMessage, HttpStatus.INTERNAL_SERVER_ERROR);
    }
}
